Module(
    body=[Import(names=[alias(name='TestGen', asname=None)]),
        FunctionDef(name='test_me',
            args=arguments(posonlyargs=[],
                args=[arg(arg='x', annotation=None, type_comment=None),
                    arg(arg='y', annotation=None, type_comment=None),
                    arg(arg='z', annotation=None, type_comment=None)],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[]),
            body=[
                If(
                    test=Compare(left=Name(id='y'), ops=[Gt], comparators=[Constant(value=13, kind=None)]),
                    body=[
                        Expr(
                            value=Call(func=Attribute(value=Name(id='TestGen'), attr='check_branch'),
                                args=[Constant(value=1, kind=None), Constant(value=1, kind=None)],
                                keywords=[])),
                        Expr(value=Call(func=Name(id='print'), args=[Constant(value='1', kind=None)], keywords=[])),
                        If(
                            test=Compare(left=Name(id='x'), ops=[Lt], comparators=[Constant(value=2, kind=None)]),
                            body=[
                                Expr(
                                    value=Call(func=Name(id='print'),
                                        args=[Constant(value='2', kind=None)],
                                        keywords=[])),
                                Assign(targets=[Name(id='z')], value=Constant(value=3, kind=None), type_comment=None),
                                If(
                                    test=Compare(left=Name(id='x'),
                                        ops=[Lt],
                                        comparators=[UnaryOp(op=USub, operand=Constant(value=1, kind=None))]),
                                    body=[
                                        Expr(
                                            value=Call(func=Name(id='print'),
                                                args=[Constant(value='3', kind=None)],
                                                keywords=[])),
                                        Assign(targets=[Name(id='z')],
                                            value=Constant(value=1, kind=None),
                                            type_comment=None)],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[
                        Expr(
                            value=Call(func=Attribute(value=Name(id='TestGen'), attr='check_branch'),
                                args=[Constant(value=1, kind=None), Constant(value=0, kind=None)],
                                keywords=[])),
                        Expr(value=Call(func=Name(id='print'), args=[Constant(value='4', kind=None)], keywords=[])),
                        Assign(targets=[Name(id='x')], value=Constant(value=2, kind=None), type_comment=None)]),
                Assign(targets=[Name(id='y')], value=Constant(value=50, kind=None), type_comment=None),
                If(
                    test=Compare(left=Name(id='z'), ops=[Eq], comparators=[Constant(value=4, kind=None)]),
                    body=[
                        Expr(value=Call(func=Name(id='print'), args=[Constant(value='5', kind=None)], keywords=[])),
                        Assign(targets=[Name(id='z')], value=Constant(value=1, kind=None), type_comment=None)],
                    orelse=[
                        Expr(value=Call(func=Name(id='print'), args=[Constant(value='6', kind=None)], keywords=[])),
                        While(
                            test=Compare(left=Name(id='x'), ops=[Lt], comparators=[Constant(value=5, kind=None)]),
                            body=[
                                Expr(
                                    value=Call(func=Name(id='print'),
                                        args=[Constant(value='7', kind=None)],
                                        keywords=[])),
                                AugAssign(target=Name(id='x'), op=Add, value=Constant(value=1, kind=None)),
                                Assign(targets=[Name(id='z')],
                                    value=BinOp(left=Name(id='z'), op=Add, right=Constant(value=1, kind=None)),
                                    type_comment=None)],
                            orelse=[])]),
                Assign(targets=[Name(id='y')], value=Constant(value=0, kind=None), type_comment=None)],
            decorator_list=[],
            returns=None,
            type_comment=None)],
    type_ignores=[])